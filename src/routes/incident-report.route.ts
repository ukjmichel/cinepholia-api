/**
 * @module routes/incident-report.routes
 *
 * @description
 * Express Router for Incident Reports.
 * Mount with: `app.use('/incident-reports', IncidentReportRouter);`
 *
 * Notes:
 * - `POST /incident-reports` accepts optional `incidentId` (UUID). If omitted,
 *   it is auto-generated by the model.
 */

import { Router } from 'express';
import * as incidentController from '../controllers/incident-report.controller.js';
import { validate } from '../middlewares/validate.js';
import { decodeJwtToken } from '../middlewares/auth.middleware.js';
import { permission } from '../middlewares/permission.js';

import {
  incidentIdParamValidation,
  createdByParamValidation,
  theaterIdParamValidation,
  hallIdParamValidation,
  statusParamValidation,
  createIncidentValidation,
  updateIncidentValidation,
  searchQueryValidation,
} from '../validators/incident-report.validator.js';

const router = Router();

/**
 * @swagger
 * /incident-reports/theaters/{theaterId}:
 *   get:
 *     summary: Get incidents for a theater (staff only)
 *     tags: [Incidents]
 *     parameters:
 *       - in: path
 *         name: theaterId
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: List of incidents
 */
router.get(
  '/theaters/:theaterId',
  theaterIdParamValidation,
  validate,
  permission.isStaff,
  incidentController.getIncidentsByLocation
);

/**
 * @swagger
 * /incident-reports/theaters/{theaterId}/halls/{hallId}:
 *   get:
 *     summary: Get incidents for a hall (staff only)
 *     tags: [Incidents]
 *     parameters:
 *       - in: path
 *         name: theaterId
 *         required: true
 *         schema:
 *           type: string
 *       - in: path
 *         name: hallId
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: List of incidents
 */
router.get(
  '/theaters/:theaterId/halls/:hallId',
  theaterIdParamValidation,
  hallIdParamValidation,
  validate,
  permission.isStaff,
  incidentController.getIncidentsByLocation
);

// Auth for all routes below
router.use(decodeJwtToken);

/**
 * @swagger
 * /incident-reports:
 *   post:
 *     summary: Create a new incident (authenticated users)
 *     tags: [Incidents]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required: [theaterId, hallId, description, createdBy]
 *             properties:
 *               incidentId:
 *                 type: string
 *                 format: uuid
 *                 description: Optional. If omitted, auto-generated by the server.
 *               theaterId: { type: string }
 *               hallId: { type: string }
 *               description: { type: string }
 *               createdBy: { type: string, format: uuid }
 *               status:
 *                 type: string
 *                 enum: [open, acknowledged, in_progress, resolved, closed]
 *           example:
 *             theaterId: "UGC_Lyon"
 *             hallId: "H1"
 *             description: "Projector flickering during the 8pm screening."
 *             createdBy: "5e4f3c2b-1a0d-4c9e-8f7e-6d5c4b3a2f10"
 *     responses:
 *       201:
 *         description: Incident created
 */
router.post(
  '/',
  createIncidentValidation,
  validate,
  incidentController.createIncident
);

/**
 * @swagger
 * /incident-reports:
 *   get:
 *     summary: Get all incidents (staff only)
 *     tags: [Incidents]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: List of incidents
 */
router.get('/', permission.isStaff, incidentController.getAllIncidents);

/**
 * @swagger
 * /incident-reports/search:
 *   get:
 *     summary: Search incidents (staff only)
 *     tags: [Incidents]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Search results
 */
router.get(
  '/search',
  searchQueryValidation,
  validate,
  permission.isStaff,
  incidentController.searchIncidents
);

/**
 * @swagger
 * /incident-reports/status/{status}:
 *   get:
 *     summary: Get incidents by status (staff only)
 *     tags: [Incidents]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: status
 *         required: true
 *         schema:
 *           type: string
 *           enum: [open, acknowledged, in_progress, resolved, closed]
 *     responses:
 *       200:
 *         description: Filtered incidents
 */
router.get(
  '/status/:status',
  statusParamValidation,
  validate,
  permission.isStaff,
  incidentController.getIncidentsByStatus
);

/**
 * @swagger
 * /incident-reports/user/{createdBy}:
 *   get:
 *     summary: Get incidents created by a user (staff only)
 *     tags: [Incidents]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: createdBy
 *         required: true
 *         schema: { type: string, format: uuid }
 *     responses:
 *       200:
 *         description: User incidents
 */
router.get(
  '/user/:createdBy',
  createdByParamValidation,
  validate,
  permission.isStaff,
  incidentController.getIncidentsByUser
);

/**
 * @swagger
 * /incident-reports/business/{incidentId}:
 *   get:
 *     summary: Get incidents by business incidentId (staff only) â€” returns an array
 *     tags: [Incidents]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: incidentId
 *         required: true
 *         schema: { type: string, format: uuid }
 *     responses:
 *       200:
 *         description: Incidents for incidentId
 */
router.get(
  '/business/:incidentId',
  incidentIdParamValidation,
  validate,
  permission.isStaff,
  incidentController.getIncidentsByIncidentId
);

/**
 * @swagger
 * /incident-reports/{incidentId}:
 *   get:
 *     summary: Get an incident by business incidentId (staff only)
 *     tags: [Incidents]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: incidentId
 *         required: true
 *         schema: { type: string, format: uuid }
 *     responses:
 *       200:
 *         description: Incident found
 */
router.get(
  '/:incidentId',
  incidentIdParamValidation,
  validate,
  permission.isStaff,
  incidentController.getIncident
);

/**
 * @swagger
 * /incident-reports/{incidentId}:
 *   put:
 *     summary: Update an incident by business incidentId (staff only)
 *     tags: [Incidents]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: incidentId
 *         required: true
 *         schema: { type: string, format: uuid }
 *     responses:
 *       200:
 *         description: Incident updated
 */
router.put(
  '/:incidentId',
  incidentIdParamValidation,
  updateIncidentValidation,
  validate,
  permission.isStaff,
  incidentController.updateIncident
);

/**
 * @swagger
 * /incident-reports/{incidentId}:
 *   delete:
 *     summary: Delete an incident by business incidentId (staff only)
 *     tags: [Incidents]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: incidentId
 *         required: true
 *         schema: { type: string, format: uuid }
 *     responses:
 *       200:
 *         description: Incident deleted
 */
router.delete(
  '/:incidentId',
  incidentIdParamValidation,
  validate,
  permission.isStaff,
  incidentController.deleteIncident
);

/**
 * @swagger
 * /incident-reports/{incidentId}/acknowledge:
 *   patch:
 *     summary: Acknowledge an incident (staff only)
 *     tags: [Incidents]
 */
router.patch(
  '/:incidentId/acknowledge',
  incidentIdParamValidation,
  validate,
  permission.isStaff,
  incidentController.acknowledgeIncident
);

/**
 * @swagger
 * /incident-reports/{incidentId}/start:
 *   patch:
 *     summary: Mark incident as in progress (staff only)
 *     tags: [Incidents]
 */
router.patch(
  '/:incidentId/start',
  incidentIdParamValidation,
  validate,
  permission.isStaff,
  incidentController.startProgress
);

/**
 * @swagger
 * /incident-reports/{incidentId}/resolve:
 *   patch:
 *     summary: Resolve an incident (staff only)
 *     tags: [Incidents]
 */
router.patch(
  '/:incidentId/resolve',
  incidentIdParamValidation,
  validate,
  permission.isStaff,
  incidentController.resolveIncident
);

/**
 * @swagger
 * /incident-reports/{incidentId}/close:
 *   patch:
 *     summary: Close an incident (staff only)
 *     tags: [Incidents]
 */
router.patch(
  '/:incidentId/close',
  incidentIdParamValidation,
  validate,
  permission.isStaff,
  incidentController.closeIncident
);

export default router;
