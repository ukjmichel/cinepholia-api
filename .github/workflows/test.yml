name: Run Node.js Tests

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: cinepholia_root_password
          MYSQL_DATABASE: cinepholia_test_db
          MYSQL_USER: cinepholia_admin
          MYSQL_PASSWORD: cinepholia_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      mongodb:
        image: mongo:6
        env:
          MONGO_INITDB_ROOT_USERNAME: cinepholia_root
          MONGO_INITDB_ROOT_PASSWORD: cinepholia_root_password
          MONGO_INITDB_DATABASE: cinepholia_test_db
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.runCommand({ ping: 1 })' --quiet || mongo --eval 'db.runCommand({ ping: 1 })' --quiet"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      # ─── Application ────────────────────────────────────────────────────────
      NODE_ENV: test
      PORT: ${{ secrets.PORT || '3000' }}
      HOST_APP_PORT: ${{ secrets.HOST_APP_PORT || '3000' }}

      # ─── MySQL Database Configuration ───────────────────────────────────────
      MYSQL_HOST: 127.0.0.1
      MYSQL_PORT: ${{ secrets.MYSQL_PORT || '3306' }}
      HOST_MYSQL_PORT: ${{ secrets.HOST_MYSQL_PORT || '3312' }}
      MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE || 'cinepholia_db' }}
      MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD || 'cinepholia_root_password' }}
      MYSQL_USER: ${{ secrets.MYSQL_USER || 'cinepholia_admin' }}
      MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD || 'cinepholia_password' }}

      # ─── MongoDB Configuration ──────────────────────────────────────────────
      MONGO_INITDB_DATABASE: ${{ secrets.MONGO_INITDB_DATABASE || 'cinepholia_db' }}
      MONGO_PORT: ${{ secrets.MONGO_PORT || '27017' }}
      HOST_MONGO_PORT: ${{ secrets.HOST_MONGO_PORT || '27017' }}
      MONGO_INITDB_ROOT_USERNAME: ${{ secrets.MONGO_INITDB_ROOT_USERNAME || 'cinepholia_root' }}
      MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.MONGO_INITDB_ROOT_PASSWORD || 'cinepholia_root_password' }}
      MONGODB_URI: mongodb://${{ secrets.MONGO_INITDB_ROOT_USERNAME || 'cinepholia_root' }}:${{ secrets.MONGO_INITDB_ROOT_PASSWORD || 'cinepholia_root_password' }}@localhost:27017/${{ secrets.MONGO_INITDB_DATABASE || 'cinepholia_db' }}?authSource=admin

      # ─── Mongo Express Configuration ────────────────────────────────────────
      MONGO_EXPRESS_PORT: ${{ secrets.MONGO_EXPRESS_PORT || '8081' }}
      HOST_MONGO_EXPRESS_PORT: ${{ secrets.HOST_MONGO_EXPRESS_PORT || '8081' }}

      # ─── Resend email configuration ─────────────────────────────────────────
      RESEND_API_KEY: ${{ secrets.RESEND_API_KEY || 're_jAD28JGy_MJJ7mZqymjTTF4WmtoiMuPtb' }}
      RESEND_FROM: ${{ secrets.RESEND_FROM || 'onboarding@resend.dev' }}
      SEND_WELCOME_EMAIL: ${{ secrets.SEND_WELCOME_EMAIL || 'false' }}

      # ─── JWT Auth Configuration ──────────────────────────────────────────────
      JWT_SECRET: ${{ secrets.JWT_SECRET || 'your_really_secret_jwt_key' }}
      JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET || 'your_even_more_secret_refresh_key' }}
      JWT_EXPIRES_IN: ${{ secrets.JWT_EXPIRES_IN || '15m' }}
      JWT_REFRESH_EXPIRES_IN: ${{ secrets.JWT_REFRESH_EXPIRES_IN || '7d' }}

      # ─── Test MySQL Database Configuration ─────────────────────────────────────
      TEST_MYSQL_HOST: 127.0.0.1
      TEST_MYSQL_PORT: ${{ secrets.TEST_MYSQL_PORT || '3306' }}
      TEST_HOST_MYSQL_PORT: ${{ secrets.TEST_HOST_MYSQL_PORT || '3312' }}
      TEST_MYSQL_DATABASE: ${{ secrets.TEST_MYSQL_DATABASE || 'cinepholia_test_db' }}
      TEST_MYSQL_ROOT_PASSWORD: ${{ secrets.TEST_MYSQL_ROOT_PASSWORD || 'cinepholia_root_password' }}
      TEST_MYSQL_USER: ${{ secrets.TEST_MYSQL_USER || 'cinepholia_admin' }}
      TEST_MYSQL_PASSWORD: ${{ secrets.TEST_MYSQL_PASSWORD || 'cinepholia_password' }}

      # ─── Test MongoDB Configuration ───────────────────────────────────────────
      TEST_MONGO_INITDB_DATABASE: ${{ secrets.TEST_MONGO_INITDB_DATABASE || 'cinepholia_test_db' }}
      TEST_MONGO_PORT: ${{ secrets.TEST_MONGO_PORT || '27017' }}
      TEST_HOST_MONGO_PORT: ${{ secrets.TEST_HOST_MONGO_PORT || '27017' }}
      TEST_MONGO_INITDB_ROOT_USERNAME: ${{ secrets.TEST_MONGO_INITDB_ROOT_USERNAME || 'cinepholia_root' }}
      TEST_MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.TEST_MONGO_INITDB_ROOT_PASSWORD || 'cinepholia_root_password' }}
      TEST_MONGODB_URI: mongodb://${{ secrets.TEST_MONGO_INITDB_ROOT_USERNAME || 'cinepholia_root' }}:${{ secrets.TEST_MONGO_INITDB_ROOT_PASSWORD || 'cinepholia_root_password' }}@localhost:27017/${{ secrets.TEST_MONGO_INITDB_DATABASE || 'cinepholia_test_db' }}?authSource=admin

      # ─── Test Mongo Express Configuration ─────────────────────────────────────
      TEST_MONGO_EXPRESS_PORT: ${{ secrets.TEST_MONGO_EXPRESS_PORT || '8082' }}

      # ─── Test Resend email configuration (optional) ─────────────────────────
      TEST_RESEND_API_KEY: ${{ secrets.TEST_RESEND_API_KEY || 're_jAD28JGy_MJJ7mZqymjTTF4WmtoiMuPtb' }}
      TEST_RESEND_FROM: ${{ secrets.TEST_RESEND_FROM || 'onboarding-test@resend.dev' }}
      TEST_SEND_WELCOME_EMAIL: ${{ secrets.TEST_SEND_WELCOME_EMAIL || 'true' }}
      TEST_EMAIL: ${{ secrets.TEST_EMAIL || 'jmichel.uk@outlook.fr' }}

      # ─── Test JWT Auth Configuration ─────────────────────────────────────────
      TEST_JWT_SECRET: ${{ secrets.TEST_JWT_SECRET || 'testing_jwt_secret' }}
      TEST_JWT_REFRESH_SECRET: ${{ secrets.TEST_JWT_REFRESH_SECRET || 'testing_jwt_refresh_secret' }}
      TEST_JWT_EXPIRES_IN: ${{ secrets.TEST_JWT_EXPIRES_IN || '15m' }}
      TEST_JWT_REFRESH_EXPIRES_IN: ${{ secrets.TEST_JWT_REFRESH_EXPIRES_IN || '7d' }}

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install MongoDB tools
        run: |
          # Install MongoDB shell (mongosh)
          wget -qO - https://www.mongodb.org/static/pgp/server-6.0.asc | sudo apt-key add -
          echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
          sudo apt-get update
          sudo apt-get install -y mongodb-mongosh

      - name: Install dependencies
        run: npm ci

      - name: Wait for MySQL to be ready
        run: |
          echo "Waiting for MySQL to be ready..."
          for i in {1..30}; do
            if mysqladmin ping -h"127.0.0.1" -ucinepholia_admin -pcinepholia_password --silent; then
              echo "MySQL is ready!";
              break;
            fi;
            echo "Waiting for MySQL... ($i/30)";
            sleep 2;
          done
          # Verify test database exists
          mysql -h127.0.0.1 -ucinepholia_admin -pcinepholia_password -e "CREATE DATABASE IF NOT EXISTS cinepholia_test_db;"

      - name: Wait for MongoDB to be ready
        run: |
          echo "Waiting for MongoDB to be ready..."
          for i in {1..30}; do
            if mongosh "mongodb://cinepholia_root:cinepholia_root_password@localhost:27017/admin" --quiet --eval "db.runCommand({ ping: 1 })" > /dev/null 2>&1; then
              echo "MongoDB is ready!";
              break;
            fi;
            echo "Waiting for MongoDB... ($i/30)";
            sleep 2;
          done

      - name: Setup test databases
        run: |
          echo "Setting up test databases..."
          # Create MySQL test database if it doesn't exist
          mysql -h127.0.0.1 -ucinepholia_admin -pcinepholia_password -e "CREATE DATABASE IF NOT EXISTS cinepholia_test_db;"

          # Verify MongoDB test database access
          mongosh "mongodb://cinepholia_root:cinepholia_root_password@localhost:27017/cinepholia_test_db?authSource=admin" --quiet --eval "db.runCommand({ ping: 1 })"

      - name: Build TypeScript (if needed)
        run: |
          if [ -f tsconfig.json ]; then
            echo "Building TypeScript..."
            npm run build || echo "Build failed or no build script available"
          fi

      - name: Run tests
        run: |
          echo "Running tests..."
          npm test

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            coverage/
            test-results.xml
          retention-days: 30